import React, {Component} from "react";
import {AsyncStorage, AppRegistry, Button, StyleSheet, Text, View, Image, TextInput, Navigator, WebView} from "react-native";
import {STYLES} from "./components/globals"
import Survey from "./components/Survey";
var PushNotification = require('react-native-push-notification');
var moment = require('moment');

var CONFIG = {
    apiBaseUrl: 'https://miklosdanka.com/psychapp/api',
}

PushNotification.configure({
    // (optional) Called when Token is generated (iOS and Android)
    onRegister: function(token) {
        console.log( 'TOKEN:', token );
    },

    // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        console.log( 'NOTIFICATION:', notification );
    },

    // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
    // senderID: "YOUR GCM SENDER ID",

    // IOS ONLY (optional): default: all - Permissions to register.
    // permissions: {
    //     alert: true,
    //     badge: true,
    //     sound: true
    // },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
     * (optional) default: true
     * - Specified if permissions (ios) and token (android and ios) will requested or not,
     * - if not, you must call PushNotificationsHandler.requestPermissions() later
     */
    requestPermissions: true,
});


PushNotification.localNotification({
    /* Android Only Properties */
    id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    ticker: "My Notification Ticker", // (optional)
    autoCancel: true, // (optional) default: true
    largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
    smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
    bigText: "This is a mobile notification. Do you like it?", // (optional) default: "message" prop
    subText: "<3", // (optional) default: none
    color: "red", // (optional) default: system default
    vibrate: true, // (optional) default: true
    vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    tag: 'some_tag', // (optional) add tag to message
    group: "group", // (optional) add group to message
    ongoing: false, // (optional) set whether this is an "ongoing" notification

    /* iOS only properties */
//     alertAction: // (optional) default: view
//     category: // (optional) default: null
// userInfo: // (optional) default: null (object containing additional notification data)

    /* iOS and Android properties */
    title: "Hi Ma≈•ko!", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
    message: "This is a mobile notification. Do you like it?", // (required)
    playSound: false, // (optional) default: true
    soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
    actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
});





export default class PsychApp extends Component {

    constructor(props) {
        super(props);
        this.state = {
            meditations: [],
            text: 'not updated',
            meditationLastAnswerDate: null
        };

        this.STORAGE = {}
        this.STORAGE.PREFIX = '@PsychAppStorage:'
        this.STORAGE.KEY_MEDITATION_LAST_ANSWER_DATE = this.STORAGE.PREFIX + 'MEDITATION_LAST_ANSWER_DATE'

        setTimeout(() => {
            this._fetchAllMeditations();
            // this._saveMeditationAnswer();
        }, 1000);
    }

    componentDidMount() {
        this._loadInitialState().done();
    }

    _loadInitialState = async () => {
        try {
            var meditationLastAnswerDate = await AsyncStorage.getItem(this.STORAGE.KEY_MEDITATION_LAST_ANSWER_DATE);
            if (meditationLastAnswerDate !== null){
                this.setState({
                    meditationLastAnswerDate: meditationLastAnswerDate
                });
            } else {
                this.setState({
                    meditationLastAnswerDate: '2000-01-01'
                });
            }
        } catch (error) {
            console.error('AsyncStorage error: ' + error.message);
        }
    };

    _fetchAllMeditations() {
        return fetch(CONFIG.apiBaseUrl + '/meditations')
            .then((response) => response.json())
            .then((responseJson) => {
                this.setState({
                    meditations: responseJson.data[0].nickname,
//                meditations: ["asd"],
                    text: 'updated'
                });
            })
            .catch((error) => {
                console.error(error);
            });
    }

    _saveMeditationAnswer() {
        var currentTimeString = moment().format()
        return fetch(CONFIG.apiBaseUrl + '/meditations', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                nickname: 'testuser',
                answer: 'yes',
                date: currentTimeString,
            })
        })
            .then((response) => {
            })
            .catch((error) => {
                console.error(error);
            });
    }

    _onPressLearnMore() {

    }

    render() {
        return (
            <View style={STYLES.appContainer}>
                <Text style={STYLES.instructions}>
                    {this.state.meditations}{'\n'}
                    {this.state.text}{'\n'}
                    {this.state.meditationLastAnswerDate}{'\n'}
                </Text>
                <Survey
                    questionText="Have you meditated today?"
                    option1Text="Yes"
                    option2Text="No"
                    thankYouText="Thanks for your response!"
                    onOption1Clicked={() => {}}
                    onOption2Clicked={() => {}}
                    isAnswered={false}
                />
            </View>
        );
    }
}





AppRegistry.registerComponent('PsychApp', () => PsychApp);



// class HelloWorldApp extends Component {
//     render() {
//         return (
//             <Text>Hello world!</Text>
//         );
//     }
// }
//
// class Bananas extends Component {
//     render() {
//         let pic = {
//             uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'
//         };
//         return (
//             <View style={{flex: 1, flexDirection: 'row'}}>
//                 <Image source={pic} style={{width: 193, height: 110}}/>
//                 <View style={{flex: 1, backgroundColor: 'powderblue'}} />
//                 <View style={{flex: 2, backgroundColor: 'skyblue'}} />
//                 <View style={{flex: 3, backgroundColor: 'steelblue'}} />
//             </View>
//         );
//     }
// }
//
// class PizzaTranslator extends Component {
//     constructor(props) {
//         super(props);
//         this.state = {text: ''};
//     }
//
//     render() {
//         return (
//             <View style={{padding: 10}}>
//                 <TextInput
//                     style={{height: 40}}
//                     placeholder="Type here to translate!"
//                     onChangeText={(text) => this.setState({text})}
//                 />
//                 <Text style={{padding: 10, fontSize: 42}}>
//                     {this.state.text.split(' ').map((word) => word && 'üçï').join(' ')}
//                 </Text>
//             </View>
//         );
//     }
// }
//
// class YoDawgApp extends Component {
//     render() {
//         return (
//             <Navigator
//                 initialRoute={{ title: 'My Initial Scene', index: 0 }}
//                 renderScene={(route, navigator) => {
//                     return <MyScene title={route.title} />
//                 }}
//             />
//         );
//     }
// }
//
// class SimpleNavigationApp extends Component {
//     render() {
//         return (
//             <Navigator
//                 initialRoute={{ title: 'My Initial Scene', index: 0 }}
//                 renderScene={(route, navigator) =>
//                     <MyScene
//                         title={route.title}
//
//                         // Function to call when a new scene should be displayed
//                         onForward={() => {
//                             const nextIndex = route.index + 1;
//                             navigator.push({
//                                 title: 'Scene ' + nextIndex,
//                                 index: nextIndex,
//                             });
//                         }}
//
//                         // Function to call to go back to the previous scene
//                         onBack={() => {
//                             if (route.index > 0) {
//                                 navigator.pop();
//                             }
//                         }}
//                     />
//                 }
//             />
//         )
//     }
// }
//
// class MyWeb extends Component {
//     render() {
//         return (
//             <WebView
//                 source={{uri: 'https://github.com/facebook/react-native'}}
//                 style={{marginTop: 20}}
//             />
//         );
//     }
// }